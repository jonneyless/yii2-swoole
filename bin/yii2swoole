#!/usr/bin/env php
<?php

/**
 * This autoloader is only used to pull laravel-s.
 * Class Psr4Autoloader
 */
class Psr4Autoloader
{
    /**
     * An associative array where the key is a namespace prefix and the value
     * is an array of base directories for classes in that namespace.
     *
     * @var array
     */
    protected $prefixes = [];

    /**
     * Register loader with SPL autoloader stack.
     *
     * @return void
     */
    public function register()
    {
        spl_autoload_register([$this, 'loadClass']);
    }

    /**
     * Adds a base directory for a namespace prefix.
     *
     * @param string $prefix The namespace prefix.
     * @param string $base_dir A base directory for class files in the
     * namespace.
     * @param bool $prepend If true, prepend the base directory to the stack
     * instead of appending it; this causes it to be searched first rather
     * than last.
     *
     * @return void
     */
    public function addNamespace($prefix, $base_dir, $prepend = false)
    {
        // normalize namespace prefix
        $prefix = trim($prefix, '\\') . '\\';

        // normalize the base directory with a trailing separator
        $base_dir = rtrim($base_dir, DIRECTORY_SEPARATOR) . '/';

        // initialize the namespace prefix array
        if (isset($this->prefixes[$prefix]) === false) {
            $this->prefixes[$prefix] = [];
        }

        // retain the base directory for the namespace prefix
        if ($prepend) {
            array_unshift($this->prefixes[$prefix], $base_dir);
        } else {
            array_push($this->prefixes[$prefix], $base_dir);
        }
    }

    /**
     * Loads the class file for a given class name.
     *
     * @param string $class The fully-qualified class name.
     *
     * @return mixed The mapped file name on success, or boolean false on
     * failure.
     */
    public function loadClass($class)
    {
        // the current namespace prefix
        $prefix = $class;

        // work backwards through the namespace names of the fully-qualified
        // class name to find a mapped file name
        while (false !== $pos = strrpos($prefix, '\\')) {

            // retain the trailing namespace separator in the prefix
            $prefix = substr($class, 0, $pos + 1);

            // the rest is the relative class name
            $relative_class = substr($class, $pos + 1);

            // try to load a mapped file for the prefix and relative class
            $mapped_file = $this->loadMappedFile($prefix, $relative_class);
            if ($mapped_file) {
                return $mapped_file;
            }

            // remove the trailing namespace separator for the next iteration
            // of strrpos()
            $prefix = rtrim($prefix, '\\');
        }

        // never found a mapped file
        return false;
    }

    /**
     * Load the mapped file for a namespace prefix and relative class.
     *
     * @param string $prefix The namespace prefix.
     * @param string $relative_class The relative class name.
     *
     * @return mixed Boolean false if no mapped file can be loaded, or the
     * name of the mapped file that was loaded.
     */
    protected function loadMappedFile($prefix, $relative_class)
    {
        // are there any base directories for this namespace prefix?
        if (isset($this->prefixes[$prefix]) === false) {
            return false;
        }

        // look through base directories for this namespace prefix
        foreach ($this->prefixes[$prefix] as $base_dir) {

            // replace the namespace prefix with the base directory,
            // replace namespace separators with directory separators
            // in the relative class name, append with .php
            $file = $base_dir
                . str_replace('\\', '/', $relative_class)
                . '.php';

            // if the mapped file exists, require it
            if ($this->requireFile($file)) {
                // yes, we're done
                return $file;
            }
        }

        // never found it
        return false;
    }

    /**
     * If a file exists, require it from the file system.
     *
     * @param string $file The file to require.
     *
     * @return bool True if the file exists, false if not.
     */
    protected function requireFile($file)
    {
        if (file_exists($file)) {
            require $file;

            return true;
        }

        return false;
    }
}

$basePath = realpath(__DIR__ . '/../');
$loader = new Psr4Autoloader();
$loader->register();

// Register yii2-swoole
$loader->addNamespace('ijony\yiis', $basePath . '/vendor/ijony/swoole/src');

// Register yii2-swoole dependencies
$loader->addNamespace('Symfony\Component\Console', $basePath . '/vendor/symfony/console');
$loader->addNamespace('Symfony\Contracts\Service', $basePath . '/vendor/symfony/service-contracts');
$loader->addNamespace('Symfony\Contracts', $basePath . '/vendor/symfony/contracts');

$command = new ijony\yiis\console\Portal($basePath);
$input = new Symfony\Component\Console\Input\ArgvInput();
$output = new Symfony\Component\Console\Output\ConsoleOutput();
$code = $command->run($input, $output);
exit($code);

if (class_exists('Dotenv\Dotenv')) {
    $repository = RepositoryBuilder::createWithDefaultAdapters()
        ->addWriter(PutenvAdapter::class)
        ->immutable()
        ->make();

    $dotenv = Dotenv::create($repository, PROJECT_ROOT);
    $dotenv->load();
}

defined('WEBROOT') or define('WEBROOT', PROJECT_ROOT . '/public/api');
defined('YII_DEBUG') or define('YII_DEBUG', getenv('APP_DEBUG') === 'true');
defined('YII_ENV') or define('YII_ENV', getenv('APP_ENV') ? : 'prod');
defined('COROUTINE_ENV') or define('COROUTINE_ENV', getenv('COROUTINE_ENV') === 'true');

$maxCoroNum = getenv('MAX_COROUTINE_NUM') ? : 3000;
$debugMode = getenv('SWOOLE_DEBUG_MODE') ? : 0;
$workerNum = getenv('SWOOLE_WORKER_NUM') ? : 2;
$taskWorkerNum = getenv('SWOOLE_TASK_WORKER_NUM') ? : 2;
$serverType = getenv('SWOOLE_SERVER_TYPE') ? : 'http';
$swooleMode = getenv('SWOOLE_MODE') ? : SWOOLE_BASE;
$socketType = getenv('SWOOLE_SOCKET_TYPE') ? : SWOOLE_SOCK_TCP;
$host = getenv('SWOOLE_LISTEN_IP') ? : '127.0.0.1';
$port = getenv('SWOOLE_LISTEN_PORT') ? : 5200;

$config = [
    'class' => 'jonneyless\swoole\server\HttpServer',
    'serverType' => $serverType,
    'sockType' => $socketType,
    'swooleMode' => $swooleMode,
    'host' => $host,
    'port' => $port,
    'setting' => [
        'daemonize' => 0,
        'max_coro_num' => $maxCoroNum,
        'reactor_num' => 1,
        'worker_num' => $workerNum,
        'task_worker_num' => $taskWorkerNum,
        'pid_file' => PROJECT_ROOT . '/apps/api/runtime/swoole.pid',
        'log_file' => PROJECT_ROOT . '/apps/api/runtime/logs/swoole.log',
        'debug_mode' => $debugMode,
        'enable_coroutine' => COROUTINE_ENV,
    ],
];

Server::run($config, function (Server $server) {
    $starter = new WebApp($server);
    // 初始化函数独立, 为了在启动时, 不会加载 Yii 相关的文件, 在库更新时采用 reload 平滑启动服务器
    $starter->init = function (BaseBootstrap $bootstrap) {
        require PROJECT_ROOT . '/vendor/jonneyless/yii2-swoole/src/Yii.php';
        require PROJECT_ROOT . '/common/config/bootstrap.php';
        require PROJECT_ROOT . '/apps/api/config/bootstrap.php';

        $config = yii\helpers\ArrayHelper::merge(
            require PROJECT_ROOT . '/common/config/main.php',
            require PROJECT_ROOT . '/common/config/main-local.php',
            require PROJECT_ROOT . '/apps/api/config/main.php',
            require PROJECT_ROOT . '/apps/api/config/main-local.php',
            require PROJECT_ROOT . '/apps/api/config/modules.php',
        );

        Yii::setAlias('@webroot', WEBROOT);
        Yii::setAlias('@web', '/');

        Yii::$swooleServer = $bootstrap->getServer()->getSwoole();

        $bootstrap->appConfig = $config;
    };

    //如果需要swoole Server
    $server->getSwoole()->on("Task", function (\Swoole\Server $serv, $task_id, $from_id, $data) {
        echo "Tasker进程接收到数据";
        echo "#{$serv->worker_id}\tonTask: [PID={$serv->worker_pid}]: task_id=$task_id, data_len=" . strlen($data) . "." . PHP_EOL;
        $serv->finish($data);
    });

    $server->getSwoole()->on("Finish", function (\Swoole\Server $serv, $task_id, $data) {
        echo "Task#$task_id finished, data_len=" . strlen($data) . PHP_EOL;
    });

    $server->bootstrap = $starter;
    $server->start();
});